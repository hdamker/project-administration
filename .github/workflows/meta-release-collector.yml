# =========================================================================================
# CAMARA Project - Meta-Release Collector Workflow v3
#
# Interim solution for collecting and reporting release metadata across all CAMARA API
# repositories until Spring 2026 when native release-metadata.yaml files become standard.
#
# Key Features:
# - Incremental updates (detect and analyze only new releases)
# - Full re-analysis capability for workflow updates
# - Focus on public releases with API-name centric viewing
# - Enhanced HTML viewers with sorting, filtering, and statistics
#
# =========================================================================================

name: Meta-Release Collector v3

on:
  workflow_dispatch:
    inputs:
      analysis_mode:
        description: 'Analysis mode'
        required: true
        type: choice
        options:
          - incremental    # Default: detect new releases only
          - full          # Re-analyze all releases
          - dry-run       # Test without committing
        default: incremental

      commit_mode:
        description: 'How to commit changes'
        required: true
        type: choice
        options:
          - direct        # Direct commit to branch
          - pr            # Create pull request
        default: direct

      debug_mode:
        description: 'Enable debug logging'
        required: false
        type: boolean
        default: false

  # schedule:
    # Weekly run on Mondays at 04:35 UTC
    # - cron: '35 4 * * 1'

env:
  # GitHub API Configuration
  GITHUB_ORG: 'camaraproject'
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Processing Configuration
  MAX_PARALLEL_JOBS: 6
  RELEASES_PER_PAGE: 100

  # Data Locations
  MASTER_METADATA_PATH: 'data/releases-master.yaml'
  CONFIG_PATH: 'config'
  REPORTS_PATH: 'reports'
  VIEWERS_PATH: 'viewers'

jobs:
  # =========================================================================================
  # Phase 1: Release Detection
  # Compare current releases with stored master metadata
  # =========================================================================================
  detect-releases:
    name: Detect New Releases
    runs-on: ubuntu-latest
    outputs:
      has_updates: ${{ steps.detect.outputs.has_updates }}
      new_releases: ${{ steps.detect.outputs.new_releases }}
      all_repos: ${{ steps.detect.outputs.all_repos }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install js-yaml axios @octokit/rest

      - name: Detect releases
        id: detect
        run: |
          echo "üîç Detecting releases in analysis mode: ${{ github.event.inputs.analysis_mode }}"

          # Run detection script
          node scripts/detect-releases.js --mode ${{ github.event.inputs.analysis_mode }} > temp/detection-output.json

          # Parse output
          HAS_UPDATES=$(jq -r '.has_updates' temp/detection-output.json)
          REPOS_TO_ANALYZE=$(jq -c '.repositories_to_analyze' temp/detection-output.json)

          echo "has_updates=${HAS_UPDATES}" >> $GITHUB_OUTPUT
          echo "repos_to_analyze=${REPOS_TO_ANALYZE}" >> $GITHUB_OUTPUT

          # Create repository groups for parallel processing
          # Split into groups of 10 repositories
          node -e "
            const repos = ${REPOS_TO_ANALYZE};
            const groupSize = 10;
            const groups = [];
            for (let i = 0; i < repos.length; i += groupSize) {
              groups.push(repos.slice(i, i + groupSize));
            }
            console.log(JSON.stringify(groups));
          " > temp/repo-groups.json

          echo "repo_groups=$(cat temp/repo-groups.json)" >> $GITHUB_OUTPUT
          echo "Found $(echo ${REPOS_TO_ANALYZE} | jq '. | length') repositories to analyze"

  # =========================================================================================
  # Phase 2: Release Analysis (Parallel)
  # Fetch and analyze releases, extract API specifications
  # =========================================================================================
  analyze-releases:
    name: Analyze Releases
    needs: detect-releases
    if: needs.detect-releases.outputs.has_updates == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repos: ${{ fromJSON(needs.detect-releases.outputs.repo_groups) }}
      max-parallel: 6

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install js-yaml axios @octokit/rest

      - name: Analyze repository group
        run: |
          echo "üìä Analyzing repositories: ${{ join(matrix.repos, ', ') }}"

          # Create output file for this group
          echo '[]' > temp/analysis-results.json

          # Analyze each repository in the group
          for repo in ${{ join(matrix.repos, ' ') }}; do
            echo "Analyzing ${repo}..."

            # Get releases for this repository
            RELEASES=$(gh api repos/${GITHUB_ORG}/${repo}/releases --paginate | jq -r '.[] | select(.prerelease == false) | .tag_name' | grep '^r[0-9]\+\.[0-9]\+$' || true)

            for release in ${RELEASES}; do
              echo "  - Analyzing release ${release}"

              # Run analysis script
              node scripts/analyze-release.js --github "${repo}" "${release}" > temp/single-analysis.json

              # Append to results
              jq -s '.[0] + [.[1]]' temp/analysis-results.json temp/single-analysis.json > temp/analysis-updated.json
              mv temp/analysis-updated.json temp/analysis-results.json
            done
          done

          echo "Analysis complete for group"

      - name: Upload analysis results
        uses: actions/upload-artifact@v4
        with:
          name: analysis-group-${{ strategy.job-index }}
          path: temp/analysis-results.json

  # =========================================================================================
  # Phase 3: Data Processing
  # Combine results, apply corrections, update master metadata
  # =========================================================================================
  update-metadata:
    name: Update Master Metadata
    needs: analyze-releases
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install js-yaml axios

      - name: Download all analysis results
        uses: actions/download-artifact@v4
        with:
          path: temp/

      - name: Combine and process data
        run: |
          echo "üîÑ Processing release data..."

          # Combine all analysis results
          echo '[]' > temp/combined-analysis.json
          for file in temp/analysis-group-*/analysis-results.json; do
            if [[ -f "$file" ]]; then
              jq -s '.[0] + .[1]' temp/combined-analysis.json "$file" > temp/combined-updated.json
              mv temp/combined-updated.json temp/combined-analysis.json
            fi
          done

          # Update master metadata with RAW data (no corrections)
          node scripts/update-master.js --mode ${{ github.event.inputs.analysis_mode }} --input temp/combined-analysis.json

          echo "Master metadata updated with $(jq '. | length' temp/combined-analysis.json) releases"

      - name: Generate meta-release reports
        run: |
          echo "üìù Generating reports..."
          # TODO: Generate JSON files for each meta-release
          # node scripts/generate-reports.js

      - name: Upload processed data
        uses: actions/upload-artifact@v4
        with:
          name: processed-data
          path: |
            data/releases-master.yaml
            reports/*.json

  # =========================================================================================
  # Phase 4: Publishing
  # Generate HTML viewers and commit/deploy results
  # =========================================================================================
  publish-reports:
    name: Publish Reports
    needs: update-metadata
    if: github.event.inputs.analysis_mode != 'dry-run'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download processed data
        uses: actions/download-artifact@v4
        with:
          name: processed-data

      - name: Generate HTML viewers
        run: |
          echo "üé® Generating HTML viewers..."
          # TODO: Build viewers with embedded JSON
          # node scripts/generate-viewers.js

      - name: Commit changes (direct)
        if: github.event.inputs.commit_mode == 'direct'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add data/releases-master.yaml
          git add reports/*.json
          git add viewers/*.html

          git commit -m "chore: Update release metadata and reports

          Analysis mode: ${{ github.event.inputs.analysis_mode }}
          Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"

          git push origin feat/meta-release-collector-v3

      - name: Create pull request
        if: github.event.inputs.commit_mode == 'pr'
        uses: peter-evans/create-pull-request@v5
        with:
          branch: update-release-metadata-${{ github.run_number }}
          title: 'chore: Update release metadata'
          body: |
            ## Release Metadata Update

            **Analysis mode**: ${{ github.event.inputs.analysis_mode }}
            **Workflow run**: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ### Changes
            - Updated master metadata
            - Regenerated meta-release reports
            - Updated HTML viewers

            Please review the changes before merging.
          commit-message: 'chore: Update release metadata'

      - name: Deploy to GitHub Pages
        if: success()
        run: |
          echo "üöÄ Deploying viewers to GitHub Pages..."
          # TODO: Copy viewers to pages repository
          # This will be implemented when we have the viewer ready

  # =========================================================================================
  # Summary Job
  # =========================================================================================
  summary:
    name: Workflow Summary
    needs: [detect-releases, publish-reports]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Generate summary
        run: |
          echo "## Meta-Release Collector Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Analysis Mode**: ${{ github.event.inputs.analysis_mode }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit Mode**: ${{ github.event.inputs.commit_mode }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Updates Found**: ${{ needs.detect-releases.outputs.has_updates }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Review the generated reports in the viewers" >> $GITHUB_STEP_SUMMARY
          echo "- Check for any inconsistencies in the logs" >> $GITHUB_STEP_SUMMARY