# =========================================================================================
# CAMARA Project - Single Repository Test Workflow
#
# This GitHub Actions workflow tests administrative operations on individual repositories
# before bulk execution. Always use this workflow first when testing new operations.
#
# CHANGELOG:
# - 2025-07-26: Initial version as is for r1.1 release of camaraproject/project-administration
# - 2025-07-28: Removed disable-wiki, add-changelog-codeowners, update-api-readiness-checklist; Added centralize-linting-workflows
#
# USAGE:
# - Manually triggered via workflow_dispatch
# - Select target repository and operation to test
# - Supports dry-run mode (recommended for initial testing)
#
# DOCUMENTATION:
# see https://github.com/camaraproject/project-administration/blob/main/documentation/project-admin-bulk-repository-adminstration.md
# =========================================================================================

name: Single Repository Test

permissions:
  contents: write       # For CODEOWNERS file operations
  pull-requests: write  # For creating pull requests

on:
  workflow_dispatch:
    inputs:
      repository_name:
        description: 'Target repository name (e.g., DeviceStatus)'
        required: true
        type: string
      
      operation:
        description: 'Operation to perform'
        required: true
        type: choice
        options:
          - 'add-changelog-file'
          - 'update-swagger-links'
          - 'update-swagger-links-releases'
          - 'centralize-linting-workflows'
        default: 'centralize-linting-workflows'
      
      dry_run:
        description: 'Run in dry-run mode (recommended for testing)'
        required: true
        type: boolean
        default: true
      
      commit_strategy:
        description: 'How to apply file changes (only applies to file-based operations)'
        required: false
        type: choice
        options:
          - 'pull-request'
          - 'direct-with-warning'
        default: 'pull-request'

jobs:
  validate-repository:
    runs-on: ubuntu-latest
    outputs:
      repository_exists: ${{ steps.check-repo.outputs.exists }}
      repository_full_name: ${{ steps.check-repo.outputs.full_name }}
      default_branch: ${{ steps.check-repo.outputs.default_branch }}
      repository_info: ${{ steps.check-repo.outputs.info }}
    steps:
      - name: Check if repository exists
        id: check-repo
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CAMARA_BULK_CHANGE_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const org = 'camaraproject';
            const repoName = '${{ github.event.inputs.repository_name }}';
            
            try {
              const response = await github.rest.repos.get({
                owner: org,
                repo: repoName
              });
              
              const repo = response.data;
              
              core.setOutput('exists', 'true');
              core.setOutput('full_name', repo.full_name);
              core.setOutput('default_branch', repo.default_branch);
              
              const info = {
                name: repo.name,
                private: repo.private,
                archived: repo.archived,
                language: repo.language,
                stars: repo.stargazers_count,
                last_updated: repo.updated_at
              };
              core.setOutput('info', JSON.stringify(info));
              
              console.log(`‚úÖ Repository found: ${repo.full_name}`);
              console.log(`   Default branch: ${repo.default_branch}`);
              console.log(`   Language: ${repo.language || 'N/A'}`);
              console.log(`   Stars: ${repo.stargazers_count}`);
              console.log(`   Private: ${repo.private}`);
              console.log(`   Archived: ${repo.archived}`);
              
              if (repo.archived) {
                core.warning(`Repository ${repo.full_name} is archived - changes may not be possible`);
              }
              
            } catch (error) {
              core.setOutput('exists', 'false');
              if (error.status === 404) {
                core.setFailed(`‚ùå Repository ${org}/${repoName} not found`);
              } else if (error.status === 403) {
                core.setFailed(`‚ùå Access denied to repository ${org}/${repoName} - check token permissions`);
              } else {
                core.setFailed(`‚ùå Error accessing repository: ${error.message}`);
              }
            }

      - name: Display repository information
        if: steps.check-repo.outputs.exists == 'true'
        run: |
          echo "## Repository Information" >> $GITHUB_STEP_SUMMARY
          echo "**Repository**: ${{ steps.check-repo.outputs.full_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Default Branch**: ${{ steps.check-repo.outputs.default_branch }}" >> $GITHUB_STEP_SUMMARY
          
          # Parse and display additional info
          INFO='${{ steps.check-repo.outputs.info }}'
          echo "**Private**: $(echo $INFO | jq -r '.private')" >> $GITHUB_STEP_SUMMARY
          echo "**Archived**: $(echo $INFO | jq -r '.archived')" >> $GITHUB_STEP_SUMMARY
          echo "**Language**: $(echo $INFO | jq -r '.language // "N/A"')" >> $GITHUB_STEP_SUMMARY
          echo "**Stars**: $(echo $INFO | jq -r '.stars')" >> $GITHUB_STEP_SUMMARY

  execute-test:
    needs: validate-repository
    if: needs.validate-repository.outputs.repository_exists == 'true'
    uses: ./.github/workflows/project-admin-repository-worker.yml
    with:
      repository_name: ${{ github.event.inputs.repository_name }}
      repository_full_name: ${{ needs.validate-repository.outputs.repository_full_name }}
      default_branch: ${{ needs.validate-repository.outputs.default_branch }}
      operation: ${{ github.event.inputs.operation }}
      dry_run: ${{ fromJson(github.event.inputs.dry_run) }}
      commit_strategy: ${{ github.event.inputs.commit_strategy }}
    secrets:
      CAMARA_BULK_CHANGE_TOKEN: ${{ secrets.CAMARA_BULK_CHANGE_TOKEN }}

  display-results:
    needs: [validate-repository, execute-test]
    if: always() && needs.validate-repository.outputs.repository_exists == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download test result
        uses: actions/download-artifact@v4
        with:
          name: result-${{ github.event.inputs.repository_name }}
          path: result/

      - name: Display test result
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Emoji mapping (same as bulk workflow)
            const emojiMap = {
              'success': '‚úÖ',
              'no-change': 'üìä', 
              'warning': '‚ö†Ô∏è',
              'would-action': 'üß™',
              'error': '‚ùå'
            };
            
            // Function to determine if result requires attention
            function requiresAttention(resultType) {
              return ['warning', 'error'].includes(resultType);
            }
            
            let resultData = null;
            
            try {
              const resultFile = path.join('result', `result-${{ github.event.inputs.repository_name }}.json`);
              if (fs.existsSync(resultFile)) {
                resultData = JSON.parse(fs.readFileSync(resultFile, 'utf8'));
                console.log('‚úÖ Successfully loaded test result');
              } else {
                console.log('‚ùå No result file found');
                return;
              }
            } catch (error) {
              console.log(`‚ùå Error reading result file: ${error.message}`);
              return;
            }
            
            // Extract result information
            const resultType = resultData.result_type || 'unknown';
            const details = resultData.details || 'No details available';
            const operationStatus = resultData.operation_status || 'unknown';
            const actionTaken = resultData.action_taken || 'unknown';
            const emoji = emojiMap[resultType] || '‚ùì';
            const needsAttention = requiresAttention(resultType);
            
            // Get workflow inputs
            const dryRun = ${{ fromJson(github.event.inputs.dry_run) }};
            const operation = '${{ github.event.inputs.operation }}';
            const repoName = '${{ github.event.inputs.repository_name }}';
            const commitStrategy = '${{ github.event.inputs.commit_strategy }}';
            
            // Build detailed summary
            let summary = `# Single Repository Test Result\n\n`;
            summary += `## ${emoji} ${resultType.toUpperCase()}\n\n`;
            summary += `**Repository**: ${repoName}\n`;
            summary += `**Operation**: ${operation}\n`;
            summary += `**Mode**: ${dryRun ? 'DRY RUN' : 'LIVE EXECUTION'}\n`;
            summary += `**Result Type**: ${emoji} ${resultType}\n`;
            summary += `**Details**: ${details}\n`;
            summary += `**Action Taken**: ${actionTaken}\n`;
            
            // Add operation-specific details
            if (['add-changelog-file', 'update-swagger-links', 'centralize-linting-workflows'].includes(operation)) {
              summary += `**Commit Strategy**: ${commitStrategy}\n`;
            }
            
            // Add PR/commit information if available
            if (resultData.pr_number && resultData.pr_url) {
              summary += `**Pull Request**: [#${resultData.pr_number}](${resultData.pr_url})\n`;
            }
            if (resultData.commit_sha) {
              summary += `**Commit**: ${resultData.commit_sha}\n`;
            }
            
            // Add linting-specific information if available
            if (operation === 'centralize-linting-workflows' && resultData.had_prior_linting !== undefined) {
              summary += `\n### Linting Migration Details\n`;
              summary += `**Had Prior Linting**: ${resultData.had_prior_linting ? 'Yes' : 'No'}\n`;
              if (resultData.legacy_artifacts_count > 0) {
                summary += `**Pre-Fall24 Artifacts Found**: ${resultData.legacy_artifacts_count}\n`;
                if (resultData.legacy_artifacts && resultData.legacy_artifacts.length > 0) {
                  summary += `**Removed Artifacts**:\n`;
                  resultData.legacy_artifacts.forEach(artifact => {
                    summary += `- ${artifact}\n`;
                  });
                }
              }
            }
            
            summary += `\n`;
            
            // Add attention notice if needed
            if (needsAttention) {
              summary += `## ‚ö†Ô∏è Attention Required\n\n`;
              summary += `This result requires your attention. Please review the details above and take appropriate action.\n\n`;
            }
            
            // Add next steps based on result
            summary += `## Next Steps\n\n`;
            
            if (resultType === 'would-action' && dryRun) {
              summary += `1. **Review the dry run results** - The operation would have succeeded\n`;
              summary += `2. **Run in live mode** - Re-run this test with dry-run disabled\n`;
              summary += `3. **Proceed to bulk execution** - Run bulk dry-run on all repositories\n`;
              summary += `4. **Execute bulk changes** - Run bulk live execution if satisfied\n`;
            } else if (resultType === 'success' && !dryRun) {
              summary += `1. **Verify changes** - Check the repository for applied changes\n`;
              summary += `2. **Test bulk dry-run** - Run bulk operation on all repositories in dry-run mode\n`;
              summary += `3. **Execute bulk changes** - Run bulk live execution if satisfied\n`;
            } else if (resultType === 'no-change') {
              summary += `1. **No action needed** - The repository is already in the desired state\n`;
              summary += `2. **Proceed to bulk execution** - This repository can be included in bulk operations\n`;
            } else if (needsAttention) {
              summary += `1. **Review the issue** - Address the problem indicated in the details\n`;
              summary += `2. **Fix and retry** - Resolve the issue and re-run this test\n`;
              summary += `3. **Exclude from bulk** - Consider excluding this repository from bulk operations\n`;
            } else {
              summary += `1. **Review the results** - Examine the operation outcome\n`;
              summary += `2. **Proceed as appropriate** - Based on the specific result type\n`;
            }
            
            // Add technical details section
            summary += `\n## Technical Details\n\n`;
            summary += `**Operation Status**: ${operationStatus}\n`;
            summary += `**Timestamp**: ${resultData.timestamp}\n`;
            summary += `**Worker Result**: [View detailed logs in execute-test job](${context.payload.repository.html_url}/actions/runs/${context.runId})\n`;
            
            // Output to job summary
            core.summary.addRaw(summary);
            await core.summary.write();
            
            // Also log key information
            console.log('=== Test Result Summary ===');
            console.log(`Repository: ${repoName}`);
            console.log(`Operation: ${operation}`);
            console.log(`Result: ${emoji} ${resultType}`);
            console.log(`Details: ${details}`);
            console.log(`Action Taken: ${actionTaken}`);
            if (needsAttention) {
              console.log('‚ö†Ô∏è ATTENTION REQUIRED');
            }

  test-summary:
    needs: [validate-repository, execute-test, display-results]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate final summary
        uses: actions/github-script@v7
        with:
          script: |
            const repoExists = '${{ needs.validate-repository.outputs.repository_exists }}' === 'true';
            const testResult = '${{ needs.execute-test.result }}';
            const displayResult = '${{ needs.display-results.result }}';
            const repoName = '${{ github.event.inputs.repository_name }}';
            const operation = '${{ github.event.inputs.operation }}';
            const dryRun = ${{ fromJson(github.event.inputs.dry_run) }};
            
            console.log('=== Final Test Summary ===');
            console.log(`Repository: ${repoName}`);
            console.log(`Repository Exists: ${repoExists}`);
            console.log(`Operation: ${operation}`);
            console.log(`Dry Run: ${dryRun}`);
            console.log(`Test Execution Result: ${testResult}`);
            console.log(`Display Result: ${displayResult}`);
            
            if (!repoExists) {
              console.log('‚ùå Repository validation failed');
            } else if (testResult === 'success') {
              console.log('‚úÖ Test completed successfully');
              if (displayResult === 'success') {
                console.log('‚úÖ Results displayed successfully');
              } else {
                console.log('‚ö†Ô∏è Result display had issues but test completed');
              }
            } else {
              console.log('‚ùå Test execution failed');
            }
            
            console.log('\nüìä Detailed results available in job summary above');
            console.log('üìÇ Result artifact available for download');
            
            // Provide guidance based on overall success
            if (repoExists && testResult === 'success') {
              console.log('\n‚úÖ SUCCESS: Single repository test completed');
              console.log('   Next: Review results and proceed to bulk operations');
            } else {
              console.log('\n‚ùå ISSUES: Single repository test had problems');
              console.log('   Next: Review errors and fix before bulk operations');
            }