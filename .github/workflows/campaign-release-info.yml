name: campaign-release-info

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run mode (plan only, no PRs created)'
        required: true
        type: boolean
        default: true

concurrency:
  group: campaign-release-info-${{ github.ref }}
  cancel-in-progress: false

env:
  MODE: ${{ inputs.dry_run && 'plan' || 'apply' }}
  ORG: hdamker
  RELEASES_FILE: data/releases-master.yaml
  INCLUDE: "QualityOnDemand,QoSBooking"
  BRANCH: bulk/release-info-sync-${{ github.run_id }}
  PR_TITLE: "[bulk] Sync Release Information section"
  PR_BODY: "Automated update of README Release Information section"

permissions:
  contents: write
  pull-requests: write

jobs:
  select:
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.sel.outputs.repos }}
    steps:
      - name: Checkout admin repo (self)
        uses: actions/checkout@v4
        with:
          path: admin

      - name: Install js-yaml
        run: npm install js-yaml

      - id: sel
        name: Build repo list (from releases-master.yaml + include filter)
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');
            const doc = yaml.load(fs.readFileSync('admin/data/releases-master.yaml', 'utf8'));
            let list = [...new Set((doc?.releases || [])
              .map(r => `${process.env.ORG}/${r.repository}`)
              .filter(Boolean))];
            const include = (process.env.INCLUDE||'').split(',').map(s=>s.trim()).filter(Boolean);
            if (include.length) list = list.filter(r => include.some(x => r.endsWith(`/${x}`)));
            core.setOutput('repos', JSON.stringify(list));

  run:
    needs: select
    runs-on: ubuntu-latest
    outputs:
      mode: ${{ env.MODE }}
    strategy:
      fail-fast: false
      matrix:
        repo: ${{ fromJson(needs.select.outputs.repos) }}

    steps:
      - name: Checkout admin repo (self)
        uses: actions/checkout@v4
        with:
          path: admin

      - name: Checkout target repo
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.repo }}
          path: repo
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Read release data
        id: data
        uses: ./admin/actions/read-release-data
        with:
          releases_file: ${{ github.workspace }}/admin/${{ env.RELEASES_FILE }}
          repo_slug: ${{ matrix.repo }}

      - name: Format API lines
        id: format
        uses: actions/github-script@v7
        with:
          script: |
            const data = JSON.parse(`${{ steps.data.outputs.json }}`);

            if (!data.apis || data.apis.length === 0) {
              core.info('No APIs found, using empty formatted_apis');
              data.formatted_apis = '';
            } else {
              const apiLines = data.apis.map(api => {
                return '  * **' + api.file_name + ' v' + api.version + '**\n' +
                  '  [[YAML]](https://github.com/camaraproject/' + data.repo_name + '/blob/' + data.latest_public_release + '/code/API_definitions/' + api.file_name + '.yaml)\n' +
                  '  [[ReDoc]](https://redocly.github.io/redoc/?url=https://raw.githubusercontent.com/camaraproject/' + data.repo_name + '/' + data.latest_public_release + '/code/API_definitions/' + api.file_name + '.yaml&nocors)\n' +
                  '  [[Swagger]](https://camaraproject.github.io/swagger-ui/?url=https://raw.githubusercontent.com/camaraproject/' + data.repo_name + '/' + data.latest_public_release + '/code/API_definitions/' + api.file_name + '.yaml)';
              }).join('\n');
              data.formatted_apis = apiLines;
            }

            core.setOutput('enhanced_json', JSON.stringify(data));

      - name: Ensure Release Info section delimiters
        id: ensure
        uses: ./admin/actions/ensure-delimited-section
        with:
          file: repo/README.md
          start: "<!-- CAMARA:RELEASE-INFO:START -->"
          end:   "<!-- CAMARA:RELEASE-INFO:END -->"
          placeholder: "_This section is managed by project-administration_"

      - name: Render content template → /tmp/release-info.md
        id: render
        uses: ./admin/actions/render-mustache
        with:
          template: ${{ github.workspace }}/admin/campaigns/release-info/templates/release-info.mustache
          data_json: ${{ steps.format.outputs.enhanced_json }}
          out_file: /tmp/release-info.md

      - name: Render PR body template → /tmp/pr-body.md
        id: render_pr_body
        uses: ./admin/actions/render-mustache
        with:
          template: ${{ github.workspace }}/admin/campaigns/release-info/templates/pr-body.mustache
          data_json: ${{ steps.format.outputs.enhanced_json }}
          out_file: /tmp/pr-body.md

      - name: Replace delimited content (writes in-place)
        id: replace
        uses: ./admin/actions/replace-delimited-content
        with:
          file: repo/README.md
          start: "<!-- CAMARA:RELEASE-INFO:START -->"
          end:   "<!-- CAMARA:RELEASE-INFO:END -->"
          new_content_file: /tmp/release-info.md

      - name: Detect changes with git diff
        id: diff
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            const branch = process.env.BRANCH;
            let changed = 'false';

            try {
              // Check if remote branch exists
              execSync(`git fetch origin ${branch}`, { cwd: 'repo', stdio: 'pipe' });
              const remoteBranchExists = execSync(`git rev-parse --verify origin/${branch}`, { cwd: 'repo', stdio: 'pipe' }).toString().trim();

              if (remoteBranchExists) {
                // Compare against remote PR branch
                console.log(`Comparing against existing remote branch origin/${branch}`);
                try {
                  execSync(`git diff --quiet origin/${branch} -- README.md`, { cwd: 'repo' });
                  console.log('No changes detected compared to PR branch');
                } catch {
                  changed = 'true';
                  console.log('Changes detected compared to PR branch');
                }
              } else {
                // Compare against main (no PR branch exists)
                console.log('No remote branch exists, comparing against main');
                try {
                  execSync('git diff --quiet', { cwd: 'repo' });
                } catch {
                  changed = 'true';
                  console.log('Changes detected compared to main');
                }
              }
            } catch (err) {
              // Remote branch doesn't exist or fetch failed, compare against main
              console.log('Remote branch not found, comparing against main');
              try {
                execSync('git diff --quiet', { cwd: 'repo' });
              } catch {
                changed = 'true';
              }
            }

            core.setOutput('changed', changed);

      - name: Finalize campaign per repo
        uses: ./admin/actions/campaign-finalize-per-repo
        with:
          mode: ${{ env.MODE }}
          changed: ${{ steps.diff.outputs.changed }}
          repo: ${{ matrix.repo }}
          campaign_data: ${{ steps.data.outputs.summary }}
          pr_base_title: ${{ env.PR_TITLE }}
          pr_body_file: /tmp/pr-body.md
          branch: ${{ env.BRANCH }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

  aggregate:
    needs: run
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Determine artifact pattern
        id: pattern
        run: |
          MODE="${{ needs.run.outputs.mode }}"
          if [ "$MODE" = "plan" ]; then
            echo "pattern=plan-*" >> $GITHUB_OUTPUT
            echo "output_name=plan" >> $GITHUB_OUTPUT
            echo "dir_name=plans" >> $GITHUB_OUTPUT
          else
            echo "pattern=results-*" >> $GITHUB_OUTPUT
            echo "output_name=results" >> $GITHUB_OUTPUT
            echo "dir_name=results" >> $GITHUB_OUTPUT
          fi

      - uses: actions/download-artifact@v4
        with:
          pattern: ${{ steps.pattern.outputs.pattern }}
          path: ${{ steps.pattern.outputs.dir_name }}

      - name: Merge artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const p = '${{ steps.pattern.outputs.dir_name }}';
            const outputName = '${{ steps.pattern.outputs.output_name }}';

            if (!fs.existsSync(p)) {
              console.log(`No ${p} directory found, no artifacts were downloaded`);
              fs.writeFileSync(`${outputName}.md`, `# No ${outputName} artifacts found\n`);
              fs.writeFileSync(`${outputName}.jsonl`, '');
              return;
            }
            const md = []; const lines = [];
            const dirs = fs.readdirSync(p);
            if (dirs.length === 0) {
              console.log(`${p} directory is empty, no artifacts were downloaded`);
              fs.writeFileSync(`${outputName}.md`, `# No ${outputName} artifacts found\n`);
              fs.writeFileSync(`${outputName}.jsonl`, '');
              return;
            }
            for (const d of dirs) {
              const dir = `${p}/${d}`;
              if (fs.existsSync(`${dir}/${outputName}.md`))    md.push(fs.readFileSync(`${dir}/${outputName}.md`,'utf8'));
              if (fs.existsSync(`${dir}/${outputName}.jsonl`)) lines.push(fs.readFileSync(`${dir}/${outputName}.jsonl`,'utf8'));
            }
            fs.writeFileSync(`${outputName}.md`, md.join('\n'));
            fs.writeFileSync(`${outputName}.jsonl`, lines.join(''));
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.pattern.outputs.output_name }}
          path: |
            ${{ steps.pattern.outputs.output_name }}.md
            ${{ steps.pattern.outputs.output_name }}.jsonl
      - name: Summary
        run: |
          OUTPUT_NAME="${{ steps.pattern.outputs.output_name }}"
          MODE_TITLE=$(echo "$OUTPUT_NAME" | sed 's/.*/\u&/')
          echo "## ${MODE_TITLE} overview" >> $GITHUB_STEP_SUMMARY
          echo "- JSONL lines: $(wc -l < ${OUTPUT_NAME}.jsonl)" >> $GITHUB_STEP_SUMMARY
