name: 'Campaign Finalize Per Repo'
description: 'Generic finalization for campaign workflows: commit, PR, record, upload'
inputs:
  mode:
    description: 'Workflow mode (plan or apply)'
    required: true
  changed:
    description: 'Whether changes were detected'
    required: true
  repo:
    description: 'Repository name (org/repo)'
    required: true
  campaign_data:
    description: 'JSON with campaign-specific data'
    required: false
    default: '{}'
  pr_title:
    description: 'PR title (apply mode only)'
    required: false
    default: ''
  pr_body_file:
    description: 'Path to rendered PR body file (apply mode only)'
    required: false
    default: ''
  branch:
    description: 'Branch name for PR'
    required: false
    default: ''
  github_token:
    description: 'GitHub token for PR creation (apply mode only)'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Detect existing PR
      id: detect
      shell: bash
      working-directory: repo
      run: |
        PR_NUMBER=$(gh pr list --head "${{ inputs.branch }}" --json number --jq '.[0].number' 2>/dev/null || echo "")
        PR_URL=$(gh pr list --head "${{ inputs.branch }}" --json url --jq '.[0].url' 2>/dev/null || echo "")

        if [ -n "$PR_NUMBER" ]; then
          echo "pr_exists=true" >> $GITHUB_OUTPUT
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
          echo "Detected existing PR #$PR_NUMBER: $PR_URL"
        else
          echo "pr_exists=false" >> $GITHUB_OUTPUT
          echo "pr_number=" >> $GITHUB_OUTPUT
          echo "pr_url=" >> $GITHUB_OUTPUT
          echo "No existing PR found"
        fi
      env:
        GH_TOKEN: ${{ inputs.github_token }}

    - name: Check PR branch modifications
      id: check_mods
      if: ${{ steps.detect.outputs.pr_exists == 'true' }}
      shell: bash
      working-directory: repo
      run: |
        git fetch origin "${{ inputs.branch }}" 2>/dev/null || true

        if git rev-parse --verify origin/${{ inputs.branch }} >/dev/null 2>&1; then
          AUTHORS=$(git log origin/${{ inputs.branch }} --not origin/main --format="%an %ae" 2>/dev/null || echo "")

          if echo "$AUTHORS" | grep -v "github-actions\[bot\]" | grep -q .; then
            echo "has_codeowner_commits=true" >> $GITHUB_OUTPUT
            echo "Found commits from codeowners on PR branch"
          else
            echo "has_codeowner_commits=false" >> $GITHUB_OUTPUT
            echo "Only bot commits on PR branch"
          fi
        else
          echo "has_codeowner_commits=false" >> $GITHUB_OUTPUT
          echo "Remote branch not found"
        fi

    - name: Determine PR status
      id: pr_status
      shell: bash
      run: |
        PR_EXISTS="${{ steps.detect.outputs.pr_exists }}"
        HAS_CODEOWNER_COMMITS="${{ steps.check_mods.outputs.has_codeowner_commits }}"
        CHANGED="${{ inputs.changed }}"

        if [ "$PR_EXISTS" = "true" ] && [ "$HAS_CODEOWNER_COMMITS" = "true" ]; then
          STATUS="modified_skip"
        elif [ "$PR_EXISTS" = "true" ] && [ "$CHANGED" = "false" ]; then
          STATUS="no_change"
        elif [ "$PR_EXISTS" = "true" ] && [ "$CHANGED" = "true" ]; then
          STATUS="will_update"
        elif [ "$PR_EXISTS" = "false" ] && [ "$CHANGED" = "true" ]; then
          STATUS="will_create"
        else
          STATUS="no_change"
        fi

        echo "pr_status=$STATUS" >> $GITHUB_OUTPUT
        echo "Determined PR status: $STATUS"

    - name: APPLY - Commit to branch
      id: commit
      if: ${{ inputs.mode == 'apply' && inputs.changed == 'true' && steps.pr_status.outputs.pr_status != 'modified_skip' }}
      shell: bash
      working-directory: repo
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git checkout -B "${{ inputs.branch }}"
        git add README.md
        git commit -m "${{ inputs.pr_title }}" || echo "No changes to commit"

        if git push --force-with-lease origin "${{ inputs.branch }}"; then
          echo "push_succeeded=true" >> $GITHUB_OUTPUT
          echo "Push succeeded"
        else
          echo "push_succeeded=false" >> $GITHUB_OUTPUT
          echo "::error::Push failed - remote branch was updated concurrently"
          echo "PUSH_FAILED" > /tmp/push_status
        fi

    - name: Update PR status if push failed
      id: push_check
      if: ${{ always() }}
      shell: bash
      run: |
        if [ -f /tmp/push_status ] && grep -q "PUSH_FAILED" /tmp/push_status; then
          echo "final_pr_status=push_failed" >> $GITHUB_OUTPUT
          echo "Push failed, marking as push_failed"
        else
          echo "final_pr_status=${{ steps.pr_status.outputs.pr_status }}" >> $GITHUB_OUTPUT
        fi
        rm -f /tmp/push_status

    - name: APPLY - Create/Update PR
      id: pr_create
      if: ${{ inputs.mode == 'apply' && steps.commit.outputs.push_succeeded == 'true' && (steps.pr_status.outputs.pr_status == 'will_create' || steps.pr_status.outputs.pr_status == 'will_update') }}
      shell: bash
      working-directory: repo
      run: |
        STATUS="${{ steps.pr_status.outputs.pr_status }}"

        if [ "$STATUS" = "will_create" ]; then
          echo "Creating new PR..."
          PR_URL=$(gh pr create \
            --title "${{ inputs.pr_title }}" \
            --body-file "${{ inputs.pr_body_file }}" \
            --draft \
            --head "${{ inputs.branch }}" \
            --base main)
          echo "created_pr_url=$PR_URL" >> $GITHUB_OUTPUT
          echo "Created PR: $PR_URL"
        elif [ "$STATUS" = "will_update" ]; then
          echo "Updated existing PR #${{ steps.detect.outputs.pr_number }}"
          echo "created_pr_url=" >> $GITHUB_OUTPUT
        fi
      env:
        GH_TOKEN: ${{ inputs.github_token }}

    - name: Record outcome
      shell: bash
      run: |
        node ${{ github.action_path }}/dist/index.js
      env:
        INPUT_REPO: ${{ inputs.repo }}
        INPUT_CHANGED: ${{ inputs.changed }}
        INPUT_MODE: ${{ inputs.mode }}
        INPUT_CAMPAIGN_DATA: ${{ inputs.campaign_data }}
        INPUT_PR_STATUS: ${{ steps.push_check.outputs.final_pr_status }}
        INPUT_PR_NUMBER: ${{ steps.detect.outputs.pr_number }}
        INPUT_PR_URL: ${{ steps.pr_create.outputs.created_pr_url || steps.detect.outputs.pr_url }}

    - name: Reset repo (plan mode)
      if: ${{ inputs.mode == 'plan' }}
      shell: bash
      working-directory: repo
      run: |
        git reset --hard
        git clean -fd

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.mode == 'plan' && format('plan-{0}-{1}', github.run_id, strategy.job-index) || format('results-{0}-{1}', github.run_id, strategy.job-index) }}
        path: |
          ${{ inputs.mode == 'plan' && 'plan' || 'results' }}.md
          ${{ inputs.mode == 'plan' && 'plan' || 'results' }}.jsonl
